// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_match.proto

#include "grpc_match.pb.h"
#include "grpc_match.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace matching {

static const char* MatchingService_method_names[] = {
  "/matching.MatchingService/CreateChannel",
  "/matching.MatchingService/AttachPlayer",
};

std::unique_ptr< MatchingService::Stub> MatchingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MatchingService::Stub> stub(new MatchingService::Stub(channel, options));
  return stub;
}

MatchingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateChannel_(MatchingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AttachPlayer_(MatchingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MatchingService::Stub::CreateChannel(::grpc::ClientContext* context, const ::matching::Empty& request, ::matching::ChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matching::Empty, ::matching::ChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChannel_, context, request, response);
}

void MatchingService::Stub::async::CreateChannel(::grpc::ClientContext* context, const ::matching::Empty* request, ::matching::ChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matching::Empty, ::matching::ChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void MatchingService::Stub::async::CreateChannel(::grpc::ClientContext* context, const ::matching::Empty* request, ::matching::ChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matching::ChannelResponse>* MatchingService::Stub::PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::matching::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matching::ChannelResponse, ::matching::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matching::ChannelResponse>* MatchingService::Stub::AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::matching::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MatchingService::Stub::AttachPlayer(::grpc::ClientContext* context, const ::matching::RequestLaunch& request, ::matching::ResponseLaunch* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matching::RequestLaunch, ::matching::ResponseLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AttachPlayer_, context, request, response);
}

void MatchingService::Stub::async::AttachPlayer(::grpc::ClientContext* context, const ::matching::RequestLaunch* request, ::matching::ResponseLaunch* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matching::RequestLaunch, ::matching::ResponseLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AttachPlayer_, context, request, response, std::move(f));
}

void MatchingService::Stub::async::AttachPlayer(::grpc::ClientContext* context, const ::matching::RequestLaunch* request, ::matching::ResponseLaunch* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AttachPlayer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matching::ResponseLaunch>* MatchingService::Stub::PrepareAsyncAttachPlayerRaw(::grpc::ClientContext* context, const ::matching::RequestLaunch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matching::ResponseLaunch, ::matching::RequestLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AttachPlayer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matching::ResponseLaunch>* MatchingService::Stub::AsyncAttachPlayerRaw(::grpc::ClientContext* context, const ::matching::RequestLaunch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAttachPlayerRaw(context, request, cq);
  result->StartCall();
  return result;
}

MatchingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchingService::Service, ::matching::Empty, ::matching::ChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatchingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matching::Empty* req,
             ::matching::ChannelResponse* resp) {
               return service->CreateChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchingService::Service, ::matching::RequestLaunch, ::matching::ResponseLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatchingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matching::RequestLaunch* req,
             ::matching::ResponseLaunch* resp) {
               return service->AttachPlayer(ctx, req, resp);
             }, this)));
}

MatchingService::Service::~Service() {
}

::grpc::Status MatchingService::Service::CreateChannel(::grpc::ServerContext* context, const ::matching::Empty* request, ::matching::ChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchingService::Service::AttachPlayer(::grpc::ServerContext* context, const ::matching::RequestLaunch* request, ::matching::ResponseLaunch* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace matching

