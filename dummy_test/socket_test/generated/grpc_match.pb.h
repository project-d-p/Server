// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_match.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_5fmatch_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_grpc_5fmatch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_grpc_5fmatch_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_5fmatch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_grpc_5fmatch_2eproto;
namespace matching {
class ChannelResponse;
struct ChannelResponseDefaultTypeInternal;
extern ChannelResponseDefaultTypeInternal _ChannelResponse_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class RequestLaunch;
struct RequestLaunchDefaultTypeInternal;
extern RequestLaunchDefaultTypeInternal _RequestLaunch_default_instance_;
class ResponseLaunch;
struct ResponseLaunchDefaultTypeInternal;
extern ResponseLaunchDefaultTypeInternal _ResponseLaunch_default_instance_;
}  // namespace matching
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace matching {

// ===================================================================


// -------------------------------------------------------------------

class ResponseLaunch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.ResponseLaunch) */ {
 public:
  inline ResponseLaunch() : ResponseLaunch(nullptr) {}
  ~ResponseLaunch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseLaunch(::google::protobuf::internal::ConstantInitialized);

  inline ResponseLaunch(const ResponseLaunch& from)
      : ResponseLaunch(nullptr, from) {}
  ResponseLaunch(ResponseLaunch&& from) noexcept
    : ResponseLaunch() {
    *this = ::std::move(from);
  }

  inline ResponseLaunch& operator=(const ResponseLaunch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLaunch& operator=(ResponseLaunch&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLaunch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseLaunch* internal_default_instance() {
    return reinterpret_cast<const ResponseLaunch*>(
               &_ResponseLaunch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseLaunch& a, ResponseLaunch& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLaunch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLaunch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseLaunch* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseLaunch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseLaunch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseLaunch& from) {
    ResponseLaunch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseLaunch* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "matching.ResponseLaunch";
  }
  protected:
  explicit ResponseLaunch(::google::protobuf::Arena* arena);
  ResponseLaunch(::google::protobuf::Arena* arena, const ResponseLaunch& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:matching.ResponseLaunch)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpc_5fmatch_2eproto;
};// -------------------------------------------------------------------

class RequestLaunch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.RequestLaunch) */ {
 public:
  inline RequestLaunch() : RequestLaunch(nullptr) {}
  ~RequestLaunch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestLaunch(::google::protobuf::internal::ConstantInitialized);

  inline RequestLaunch(const RequestLaunch& from)
      : RequestLaunch(nullptr, from) {}
  RequestLaunch(RequestLaunch&& from) noexcept
    : RequestLaunch() {
    *this = ::std::move(from);
  }

  inline RequestLaunch& operator=(const RequestLaunch& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLaunch& operator=(RequestLaunch&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLaunch& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLaunch* internal_default_instance() {
    return reinterpret_cast<const RequestLaunch*>(
               &_RequestLaunch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestLaunch& a, RequestLaunch& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLaunch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLaunch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLaunch* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestLaunch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestLaunch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RequestLaunch& from) {
    RequestLaunch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestLaunch* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "matching.RequestLaunch";
  }
  protected:
  explicit RequestLaunch(::google::protobuf::Arena* arena);
  RequestLaunch(::google::protobuf::Arena* arena, const RequestLaunch& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerTokenFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated string player_token = 1;
  int player_token_size() const;
  private:
  int _internal_player_token_size() const;

  public:
  void clear_player_token() ;
  const std::string& player_token(int index) const;
  std::string* mutable_player_token(int index);
  void set_player_token(int index, const std::string& value);
  void set_player_token(int index, std::string&& value);
  void set_player_token(int index, const char* value);
  void set_player_token(int index, const char* value, std::size_t size);
  void set_player_token(int index, absl::string_view value);
  std::string* add_player_token();
  void add_player_token(const std::string& value);
  void add_player_token(std::string&& value);
  void add_player_token(const char* value);
  void add_player_token(const char* value, std::size_t size);
  void add_player_token(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& player_token() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_player_token();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_player_token() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_player_token();

  public:
  // string channel_id = 2;
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:matching.RequestLaunch)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> player_token_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpc_5fmatch_2eproto;
};// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:matching.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from)
      : Empty(nullptr, from) {}
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "matching.Empty";
  }
  protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:matching.Empty)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_grpc_5fmatch_2eproto;
};// -------------------------------------------------------------------

class ChannelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.ChannelResponse) */ {
 public:
  inline ChannelResponse() : ChannelResponse(nullptr) {}
  ~ChannelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChannelResponse(::google::protobuf::internal::ConstantInitialized);

  inline ChannelResponse(const ChannelResponse& from)
      : ChannelResponse(nullptr, from) {}
  ChannelResponse(ChannelResponse&& from) noexcept
    : ChannelResponse() {
    *this = ::std::move(from);
  }

  inline ChannelResponse& operator=(const ChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelResponse& operator=(ChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelResponse*>(
               &_ChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelResponse& a, ChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChannelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChannelResponse& from) {
    ChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChannelResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "matching.ChannelResponse";
  }
  protected:
  explicit ChannelResponse(::google::protobuf::Arena* arena);
  ChannelResponse(::google::protobuf::Arena* arena, const ChannelResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kUdpIpFieldNumber = 2,
    kUdpPortFieldNumber = 3,
    kTcpIpFieldNumber = 4,
    kTcpPortFieldNumber = 5,
  };
  // string channel_id = 1;
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string udp_ip = 2;
  void clear_udp_ip() ;
  const std::string& udp_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_udp_ip(Arg_&& arg, Args_... args);
  std::string* mutable_udp_ip();
  PROTOBUF_NODISCARD std::string* release_udp_ip();
  void set_allocated_udp_ip(std::string* value);

  private:
  const std::string& _internal_udp_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udp_ip(
      const std::string& value);
  std::string* _internal_mutable_udp_ip();

  public:
  // string udp_port = 3;
  void clear_udp_port() ;
  const std::string& udp_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_udp_port(Arg_&& arg, Args_... args);
  std::string* mutable_udp_port();
  PROTOBUF_NODISCARD std::string* release_udp_port();
  void set_allocated_udp_port(std::string* value);

  private:
  const std::string& _internal_udp_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udp_port(
      const std::string& value);
  std::string* _internal_mutable_udp_port();

  public:
  // string tcp_ip = 4;
  void clear_tcp_ip() ;
  const std::string& tcp_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tcp_ip(Arg_&& arg, Args_... args);
  std::string* mutable_tcp_ip();
  PROTOBUF_NODISCARD std::string* release_tcp_ip();
  void set_allocated_tcp_ip(std::string* value);

  private:
  const std::string& _internal_tcp_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tcp_ip(
      const std::string& value);
  std::string* _internal_mutable_tcp_ip();

  public:
  // string tcp_port = 5;
  void clear_tcp_port() ;
  const std::string& tcp_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tcp_port(Arg_&& arg, Args_... args);
  std::string* mutable_tcp_port();
  PROTOBUF_NODISCARD std::string* release_tcp_port();
  void set_allocated_tcp_port(std::string* value);

  private:
  const std::string& _internal_tcp_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tcp_port(
      const std::string& value);
  std::string* _internal_mutable_tcp_port();

  public:
  // @@protoc_insertion_point(class_scope:matching.ChannelResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::google::protobuf::internal::ArenaStringPtr udp_ip_;
    ::google::protobuf::internal::ArenaStringPtr udp_port_;
    ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
    ::google::protobuf::internal::ArenaStringPtr tcp_port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpc_5fmatch_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// ChannelResponse

// string channel_id = 1;
inline void ChannelResponse::clear_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& ChannelResponse::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.ChannelResponse.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelResponse::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:matching.ChannelResponse.channel_id)
}
inline std::string* ChannelResponse::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:matching.ChannelResponse.channel_id)
  return _s;
}
inline const std::string& ChannelResponse::_internal_channel_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_id_.Get();
}
inline void ChannelResponse::_internal_set_channel_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* ChannelResponse::_internal_mutable_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* ChannelResponse::release_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:matching.ChannelResponse.channel_id)
  return _impl_.channel_id_.Release();
}
inline void ChannelResponse::set_allocated_channel_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:matching.ChannelResponse.channel_id)
}

// string udp_ip = 2;
inline void ChannelResponse::clear_udp_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_ip_.ClearToEmpty();
}
inline const std::string& ChannelResponse::udp_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.ChannelResponse.udp_ip)
  return _internal_udp_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelResponse::set_udp_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:matching.ChannelResponse.udp_ip)
}
inline std::string* ChannelResponse::mutable_udp_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_udp_ip();
  // @@protoc_insertion_point(field_mutable:matching.ChannelResponse.udp_ip)
  return _s;
}
inline const std::string& ChannelResponse::_internal_udp_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.udp_ip_.Get();
}
inline void ChannelResponse::_internal_set_udp_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_ip_.Set(value, GetArena());
}
inline std::string* ChannelResponse::_internal_mutable_udp_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.udp_ip_.Mutable( GetArena());
}
inline std::string* ChannelResponse::release_udp_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:matching.ChannelResponse.udp_ip)
  return _impl_.udp_ip_.Release();
}
inline void ChannelResponse::set_allocated_udp_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.udp_ip_.IsDefault()) {
          _impl_.udp_ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:matching.ChannelResponse.udp_ip)
}

// string udp_port = 3;
inline void ChannelResponse::clear_udp_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_port_.ClearToEmpty();
}
inline const std::string& ChannelResponse::udp_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.ChannelResponse.udp_port)
  return _internal_udp_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelResponse::set_udp_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:matching.ChannelResponse.udp_port)
}
inline std::string* ChannelResponse::mutable_udp_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_udp_port();
  // @@protoc_insertion_point(field_mutable:matching.ChannelResponse.udp_port)
  return _s;
}
inline const std::string& ChannelResponse::_internal_udp_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.udp_port_.Get();
}
inline void ChannelResponse::_internal_set_udp_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.udp_port_.Set(value, GetArena());
}
inline std::string* ChannelResponse::_internal_mutable_udp_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.udp_port_.Mutable( GetArena());
}
inline std::string* ChannelResponse::release_udp_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:matching.ChannelResponse.udp_port)
  return _impl_.udp_port_.Release();
}
inline void ChannelResponse::set_allocated_udp_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.udp_port_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.udp_port_.IsDefault()) {
          _impl_.udp_port_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:matching.ChannelResponse.udp_port)
}

// string tcp_ip = 4;
inline void ChannelResponse::clear_tcp_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tcp_ip_.ClearToEmpty();
}
inline const std::string& ChannelResponse::tcp_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.ChannelResponse.tcp_ip)
  return _internal_tcp_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelResponse::set_tcp_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:matching.ChannelResponse.tcp_ip)
}
inline std::string* ChannelResponse::mutable_tcp_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tcp_ip();
  // @@protoc_insertion_point(field_mutable:matching.ChannelResponse.tcp_ip)
  return _s;
}
inline const std::string& ChannelResponse::_internal_tcp_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tcp_ip_.Get();
}
inline void ChannelResponse::_internal_set_tcp_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_ip_.Set(value, GetArena());
}
inline std::string* ChannelResponse::_internal_mutable_tcp_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tcp_ip_.Mutable( GetArena());
}
inline std::string* ChannelResponse::release_tcp_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:matching.ChannelResponse.tcp_ip)
  return _impl_.tcp_ip_.Release();
}
inline void ChannelResponse::set_allocated_tcp_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tcp_ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tcp_ip_.IsDefault()) {
          _impl_.tcp_ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:matching.ChannelResponse.tcp_ip)
}

// string tcp_port = 5;
inline void ChannelResponse::clear_tcp_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tcp_port_.ClearToEmpty();
}
inline const std::string& ChannelResponse::tcp_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.ChannelResponse.tcp_port)
  return _internal_tcp_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelResponse::set_tcp_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:matching.ChannelResponse.tcp_port)
}
inline std::string* ChannelResponse::mutable_tcp_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tcp_port();
  // @@protoc_insertion_point(field_mutable:matching.ChannelResponse.tcp_port)
  return _s;
}
inline const std::string& ChannelResponse::_internal_tcp_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tcp_port_.Get();
}
inline void ChannelResponse::_internal_set_tcp_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_port_.Set(value, GetArena());
}
inline std::string* ChannelResponse::_internal_mutable_tcp_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tcp_port_.Mutable( GetArena());
}
inline std::string* ChannelResponse::release_tcp_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:matching.ChannelResponse.tcp_port)
  return _impl_.tcp_port_.Release();
}
inline void ChannelResponse::set_allocated_tcp_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tcp_port_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tcp_port_.IsDefault()) {
          _impl_.tcp_port_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:matching.ChannelResponse.tcp_port)
}

// -------------------------------------------------------------------

// RequestLaunch

// repeated string player_token = 1;
inline int RequestLaunch::_internal_player_token_size() const {
  return _internal_player_token().size();
}
inline int RequestLaunch::player_token_size() const {
  return _internal_player_token_size();
}
inline void RequestLaunch::clear_player_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.player_token_.Clear();
}
inline std::string* RequestLaunch::add_player_token()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_player_token()->Add();
  // @@protoc_insertion_point(field_add_mutable:matching.RequestLaunch.player_token)
  return _s;
}
inline const std::string& RequestLaunch::player_token(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.RequestLaunch.player_token)
  return _internal_player_token().Get(index);
}
inline std::string* RequestLaunch::mutable_player_token(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:matching.RequestLaunch.player_token)
  return _internal_mutable_player_token()->Mutable(index);
}
inline void RequestLaunch::set_player_token(int index, const std::string& value) {
  _internal_mutable_player_token()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::set_player_token(int index, std::string&& value) {
  _internal_mutable_player_token()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::set_player_token(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_player_token()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::set_player_token(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_player_token()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::set_player_token(int index, absl::string_view value) {
  _internal_mutable_player_token()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::add_player_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_player_token()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::add_player_token(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_player_token()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::add_player_token(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_player_token()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::add_player_token(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_player_token()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:matching.RequestLaunch.player_token)
}
inline void RequestLaunch::add_player_token(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_player_token()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:matching.RequestLaunch.player_token)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestLaunch::player_token() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:matching.RequestLaunch.player_token)
  return _internal_player_token();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestLaunch::mutable_player_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:matching.RequestLaunch.player_token)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_player_token();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestLaunch::_internal_player_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.player_token_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestLaunch::_internal_mutable_player_token() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.player_token_;
}

// string channel_id = 2;
inline void RequestLaunch::clear_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& RequestLaunch::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:matching.RequestLaunch.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestLaunch::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:matching.RequestLaunch.channel_id)
}
inline std::string* RequestLaunch::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:matching.RequestLaunch.channel_id)
  return _s;
}
inline const std::string& RequestLaunch::_internal_channel_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_id_.Get();
}
inline void RequestLaunch::_internal_set_channel_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* RequestLaunch::_internal_mutable_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* RequestLaunch::release_channel_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:matching.RequestLaunch.channel_id)
  return _impl_.channel_id_.Release();
}
inline void RequestLaunch::set_allocated_channel_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:matching.RequestLaunch.channel_id)
}

// -------------------------------------------------------------------

// ResponseLaunch

// int32 status = 1;
inline void ResponseLaunch::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::int32_t ResponseLaunch::status() const {
  // @@protoc_insertion_point(field_get:matching.ResponseLaunch.status)
  return _internal_status();
}
inline void ResponseLaunch::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:matching.ResponseLaunch.status)
}
inline ::int32_t ResponseLaunch::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void ResponseLaunch::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace matching


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_grpc_5fmatch_2eproto_2epb_2eh
